./constants.js: GENESIS_HASH, // TODO: use a real genesis hash
./constants.js: RELEASE_NAME, // TODO: use a real release name
./constants.js: RELEASE_DESCRIPTION, // TODO: use a real release description
./settings/local.js: // TODO: @chrisinajar
./types/spa.js: // TODO: move CSS to inline from webpack
./types/scraper.js: // TODO: rename to process or work
./types/compiler.js: // TODO: load from:
./types/agent.js: // stop: ['\n'] // TODO: eliminate need for stop tokens
./types/agent.js: // TODO: add configurable rules
./components/Bridge.js: // TODO: re-evaluate multiple connections
./components/Bridge.js: // TODO: faster!  converting ArrayBuffer to buffer etc. is slow (~4x)
./components/Bridge.js: // TODO: refactor @fabric/core/types/message to support arbitrary message types
./components/Jeeves.js: // TODO: inherit from @fabric/http/types/component
./components/AdminSettings.js: // TODO: add users to admin settings
./components/AdminSettings.js: // TODO: add pagination to users
./components/Dashboard.js: * TODO: Add routes for judges, opinions, documents, people, reporters, jurisdictions, and volumes
./components/FeedbackSidebar.js: // TODO: implement message->case API
./components/Collection.js: // TODO: assign endpoint to search
./components/Collection.js: // TODO: generalize collection contents into cards
./scripts/setup.sh: # TODO: consider running local DNS to resolve both IPv4 and Onion addresses
./scripts/browser.js: // TODO: consider localforage
./scripts/browser.js: // TODO: consider schema from Knex / MySQL
./scripts/browser.js: // TODO: consider GraphQL to pass schema
./actions/bridgeActions.js: // TODO: get bridge instance
./actions/caseActions.js: // TODO: pagination
./services/jeeves.js: // TODO: use bcryptjs instead of bcrypt?
./services/jeeves.js: // TODO: use levelgraph instead of level?
./services/jeeves.js: // TODO: reduce to whole library import?
./services/jeeves.js: // TODO: Mistral
./services/jeeves.js: // TODO: HarvardCaseLaw
./services/jeeves.js: // TODO: use path
./services/jeeves.js: // TODO: enable recursive Filesystem (directories)
./services/jeeves.js: // TODO: safe shutdown
./services/jeeves.js: // TODO: remove async, use local state instead
./services/jeeves.js: // TODO: prepare maximum token length
./services/jeeves.js: const words = request.query.split(/\s+/g); // TODO: vector search, sort by relevance
./services/jeeves.js: // TODO: execute RAG query for additional metadata
./services/jeeves.js: // TODO: loop over all agents
./services/jeeves.js: // TODO: compress to 4096 tokens
./services/jeeves.js: // TODO: load from STATE file
./services/jeeves.js: courts: [], // TODO: implement
./services/jeeves.js: documents: [], // TODO: implement
./services/jeeves.js: people: [], // TODO: implement
./services/jeeves.js: // TODO: store sample.id as fabric_id
./services/jeeves.js: // TODO: remove
./services/jeeves.js: // TODO: move all handlers to class methods
./services/jeeves.js: // TODO: render page for accepting invitation
./services/jeeves.js: // TODO: change this route from `/sessionRestore` to use authMiddleware?
./services/jeeves.js: // TODO: import auth token, load data
./services/jeeves.js: // TODO: additional params (auth?)
./services/jeeves.js: // TODO: provide state
./services/jeeves.js: // TODO: fix this hack
./services/jeeves.js: const page = new CaseHome({}); // TODO: use CaseView
./services/jeeves.js: // TODO: re-evaluate security of `is_admin` check
./services/jeeves.js: // TODO: update the conversation upon change (new user message, new agent message)
./services/jeeves.js: // TODO: sort conversations by updated_at (below line)
./services/jeeves.js: // TODO: provide state
./services/jeeves.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./services/jeeves.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./services/jeeves.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./services/jeeves.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./services/jeeves.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./services/jeeves.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./services/jeeves.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./services/jeeves.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./services/jeeves.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./services/jeeves.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./services/jeeves.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./services/jeeves.js: // TODO: check token
./services/jeeves.js: // TODO: document why array only for Postgres
./services/jeeves.js: // room: roomID // TODO: replace with a generic property (not specific to Matrix)
./services/jeeves.js: // TODO: restore response tracking
./services/jeeves.js: // TODO: store request ID
./services/jeeves.js: // TODO: restore titling
./services/jeeves.js: // TODO: attach old message ID to a new message ID, send `regenerate_requested` to true
./services/jeeves.js: // TODO: update message graph; consider requests, responses
./services/jeeves.js: //             user_id: 1 // TODO: real user ID
./services/jeeves.js: // TODO: troubleshoot why this is necessary (use `why()` above)
./services/jeeves.js: room: roomID // TODO: replace with a generic property (not specific to Matrix)
./services/jeeves.js: // TODO: fix @fabric/core/types/message to allow custom message types
./services/jeeves.js: // TODO: fix @fabric/core/types/message to allow custom message types
./services/jeeves.js: // TODO: multiple case search sources
./services/jeeves.js: // TODO: concat into results
./services/jeeves.js: // TODO: queue crawl jobs for missing cases
./services/jeeves.js: // TODO: Harvard search
./services/jeeves.js: // TODO: CourtListener search
./services/jeeves.js: // TODO: Promise.allSettled([agentAlpha.start(), agentBeta.start(), agentGamma.start()]);
./services/jeeves.js: // TODO: direct store to graph database
./services/fabric.js: // TODO: validate documents
./services/fabric.js: // TODO: decide inner Fabric state vs. standard document content
./services/courtlistener.js: // TODO: these should be async streams
./services/courtlistener.js: // TODO: this should be a stream
./services/courtlistener.js: // TODO: this should be a stream
./services/courtlistener.js: // TODO: this should be a stream
./services/courtlistener.js: // TODO: this should be a stream
./services/courtlistener.js: // TODO: this should be a stream
./services/courtlistener.js: // TODO: this should be a stream
./services/courtlistener.js: // TODO: this should be a stream
./services/courtlistener.js: // TODO: this should be a stream
./services/harvard.js: // TODO: these should be async streams
./services/harvard.js: // TODO: this should be a stream
./services/harvard.js: // TODO: this should be a stream
./services/harvard.js: // TODO: this should be a stream
./services/harvard.js: // TODO: this should be a stream
./services/harvard.js: // TODO: this should be a stream
