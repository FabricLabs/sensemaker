./constants.js: const ENABLE_CHANGELOG = true; // TODO: enable changelog ("blog")
./constants.js: const ENABLE_BILLING = false; // TODO: enable billing
./constants.js: GENESIS_HASH, // TODO: use a real genesis hash
./constants.js: RELEASE_NAME, // TODO: use a real release name
./constants.js: RELEASE_DESCRIPTION, // TODO: use a real release description
./settings/local.js: // TODO: @chrisinajar
./settings/local.js: domain: 'sensemaker.io', // TODO: implement network-wide document search
./settings/network.js: /* TODO: enable hivemind */
./types/spa.js: // TODO: move CSS to inline from webpack
./types/scraper.js: // TODO: rename to process or work
./types/queue.js: //       // TODO: copy this to a "doWork" method, take new job immediately (or sleep if none available)
./types/queue.js: //         // TODO: implement retries here (decrement counter, reinsert job into queue)
./types/queue.js: // TODO: enable `notify-keyspace-events` on Redis server
./types/queue.js: // TODO: canonize this API
./types/queue.js: // TODO: reverse this logic to reject if !this.redis
./types/compiler.js: // TODO: load from:
./types/agent.js.bak: // stop: ['\n'] // TODO: eliminate need for stop tokens
./types/agent.js.bak: // TODO: consider making this a FabricMessageID
./types/trainer.js: // text: document.content, // TODO: re-work storage, use document ID instead
./types/trainer.js: // TODO: check for `embedding` and fail if not present
./types/trainer.js: // TODO: receive event in core service and correctly create blob, confirm ID matches
./types/trainer.js: // TODO: use @fabric/core/types/filesystem for a persistent log of changes (sidechains)
./types/trainer.js: // process.exit(); // TODO: look at exit codes
./types/cli.js: mode: 'rpc', // TODO: change name of mode to `rest`?
./types/cli.js: // TODO: clean up workaround (from https://github.com/chjj/blessed/issues/109)
./types/agent.js: // stop: ['\n'] // TODO: eliminate need for stop tokens
./types/agent.js: // TODO: add configurable rules
./types/agent.js: console.debug('[!!!]', '[TODO]', '[PROMETHEUS]', 'Trigger Prometheus here!');
./types/agent.js: }); // TODO: remove this...
./types/agent.js: if (this.settings.fabric) await this.fabric.start(); // TODO: capture node.id
./Dockerfile: # TODO: mount SSHFS / similar here
./contracts/boot.js: const patches = []; // TODO: get from state
./components/HeaderBar.js: // TODO: use i18n (e.g., call i18n.t('pitch.cta.text') etc.)
./components/Bridge.js: // TODO: re-evaluate multiple connections
./components/Bridge.js: // TODO: faster!  converting ArrayBuffer to buffer etc. is slow (~4x)
./components/Bridge.js: // TODO: refactor @fabric/core/types/message to support arbitrary message types
./components/Sensemaker.js.bak: // TODO: inherit from @fabric/http/types/component
./components/SensemakerUI.js: <fabric-container id="react-application">{/* TODO: render string here */}</fabric-container>
./components/AdminSettings.js: //TODO: add history push to different tabs
./components/AdminSettings.js: // TODO: add users to admin settings
./components/AdminSettings.js: // TODO: add pagination to users
./components/ConversationsList.js: {/* TODO: double check that this works as intended */}
./components/Splash.js: // TODO: use i18n (e.g., call i18n.t('pitch.cta.text') etc.)
./components/InformationSidebar.js: // TODO: implement message->data API
./components/InformationSidebar.js: // TODO: Standardize `SEARCH` as a verb on all Resources, to return a list of document metadata and links to referenced documents
./components/FrontPage.js: // TODO: use i18n (e.g., call i18n.t('pitch.cta.text') etc.)
./components/Sensemaker.js: // TODO: inherit from @fabric/http/types/component
./components/ContractHome.js: // TODO: implement this.applicationString
./components/DocumentHome.js: // TODO: change to `searchDocuments`
./components/Changelog.js: {/* TODO: populate from GitHub releases */}
./components/Dashboard.js: // TODO: migrate this to constants.js
./components/Dashboard.js: const DocumentDrafter = require('./DocumentDrafter'); // TODO: remove
./components/Dashboard.js: // TODO: review and determine what to do with this function
./components/Dashboard.js: * TODO: Add routes for documents, people, and settings
./components/Dashboard.js: {/* TODO: fix these routes */}
./components/Dashboard.js: {/* END TODO */}
./components/Collection.js: // TODO: assign endpoint to search
./components/Collection.js: // TODO: generalize collection contents into cards
./components/Jeeves.js.bak: // TODO: inherit from @fabric/http/types/component
./scripts/setup.sh: # TODO: consider running local DNS to resolve both IPv4 and Onion addresses
./scripts/trainer.js: // TODO: import these from constants file
./scripts/trainer.js: // TODO: filter documents by embedding status (only process documents lacking embeddings)
./scripts/trainer.js: // TODO: subscribe to filesystem changes
./scripts/trainer.js: // TODO: warn about this loop on startup
./scripts/trainer.js: // TODO: consider using authority or domain instead of simply "novo" to enable cross-host training
./scripts/trainer.js: // TODO: consider using authority or domain instead of simply "novo" to enable cross-host training
./scripts/trainer.js: // TODO: consider using authority or domain instead of simply "novo" to enable cross-host training
./scripts/browser.js: // TODO: restore fabric-chat-bar
./scripts/browser.js: // TODO: consider localforage
./scripts/browser.js: // TODO: consider schema from Knex / MySQL
./scripts/browser.js: // TODO: consider GraphQL to pass schema
./scripts/browser.js: // TODO: migrate this to `functions/mapStateToProps.js`?
./scripts/browser.js: // TODO: render to `fabric-application-target`?
./actions/usersActions.js: // TODO: pagination
./actions/bridgeActions.js: // TODO: get bridge instance
./actions/uploadActions.js: // TODO: pagination
./actions/uploadActions.js: body: JSON.stringify({ query }) // TODO: filter search to user's files (at API level)
./actions/caseActions.js: // TODO: pagination
./functions/IngestFile.js: // TODO: check for error
./functions/IngestFile.js: // TODO: check for error
./routes/messages/create_message.js: // TODO: document why array only for Postgres
./routes/messages/create_message.js: // TODO: emit message
./routes/messages/create_message.js: // room: roomID // TODO: replace with a generic property (not specific to Matrix)
./routes/messages/create_message.js: // TODO: restore response tracking
./routes/messages/create_message.js: // TODO: store request ID
./routes/messages/create_message.js: // TODO: restore titling
./routes/jurisdictions/jurisdiction_view.js: // TODO: pagination
./routes/uploads/get_uploads.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./routes/sessions/create_session.js: // TODO: sign token
./routes/sessions/create_session.js: // TODO: validate token after signing
./routes/conversations/get_conversations_by_id.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./routes/conversations/get_conversations.js: // TODO: re-evaluate security of `is_admin` check
./routes/conversations/get_conversations.js: // TODO: update the conversation upon change (new user message, new agent message)
./routes/conversations/get_conversations.js: // TODO: sort conversations by updated_at (below line)
./routes/conversations/get_conversations.js: // TODO: provide state
./routes/users/list_users.js: // TODO: pagination
./routes/people/get_people.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./routes/files/create_file.js: // TODO: refactor to use chaining instead of try/catch
./routes/files/create_file.js: // // TODO: allow duplicate file upload
./routes/files/create_file.js: // TODO: standardize the file upload logic into Jeeves (folder to look for, folder to move to, etc.)
./routes/files/create_file.js: // TODO: restrict file types
./routes/files/create_file.js: // TODO: report file for cleanup / investigation
./routes/courts/list_courts_by_jurisdiction.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./routes/courts/court_view_by_id.js: // TODO: pagination
./routes/courts/court_view.js: // TODO: pagination
./routes/courts/list_courts.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./routes/courts/find_court.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./routes/documents/delete_document_section.js: // TODO: make error messages nicer, use both HTML and JSON depending on header
./routes/documents/get_document_sections.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./routes/documents/list_documents.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./routes/documents/create_document_section.js: // TODO: make error messages nicer, use both HTML and JSON depending on header
./routes/documents/create_document_section.js: // TODO: parse JSON, return to object before creating Actor
./routes/documents/create_document_section.js: // TODO: handle errors
./routes/documents/get_document_by_id.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./routes/documents/create_document.js: // TODO: make error messages nicer, use both HTML and JSON depending on header
./routes/documents/create_document.js: type: type, // TODO: allow configuration of document type
./routes/documents/create_document.js: // TODO: parse JSON, return to object before creating Actor
./routes/documents/create_document.js: // TODO: handle errors
./routes/documents/create_document.js: // TODO: actor ID { documentID, sectionNumber }
./routes/documents/edit_document_section.js: // TODO: make error messages nicer, use both HTML and JSON depending on header
./routes/documents/edit_document_section.js: // TODO: handle errors
./routes/reporters/view_reporter.js: // TODO: pagination
./routes/matters/get_conversations.js: // TODO: pagination
./routes/matters/matter_view.js: // TODO: pagination
./routes/invitations/create_invitation.js: // TODO: serve from assets (@nplayer89)
./services/gemini.js: // TODO: import from prompts/sensemaker.txt
./services/fabric.js: // TODO: validate documents
./services/fabric.js: // TODO: decide inner Fabric state vs. standard document content
./services/sensemaker.js: // TODO: use levelgraph instead of level?
./services/sensemaker.js: // TODO: use bcryptjs instead of bcrypt?
./services/sensemaker.js: // TODO: reduce to whole library import?
./services/sensemaker.js: // TODO: extract defaults to `settings/default.json`
./services/sensemaker.js: // TODO: use path
./services/sensemaker.js: // TODO: enable recursive Filesystem (directories)
./services/sensemaker.js: // TODO: use Fabric Resources; routes and components will be defined there
./services/sensemaker.js: // TODO: check for vulnerabilities, easy setup
./services/sensemaker.js: // TODO: evaluate use of temperature
./services/sensemaker.js: // TODO: See if we can put this in its own file.
./services/sensemaker.js: // TODO: Try to reduce the scope of this to only the objects who need to use it. Instead of extending Redis to every
./services/sensemaker.js: // TODO: See if we can put this in its own file.
./services/sensemaker.js: // TODO: safe shutdown
./services/sensemaker.js: // TODO: define Agent methods from `documentation`
./services/sensemaker.js: // TODO: remove async, use local state instead
./services/sensemaker.js: // TODO: receive from message parameter
./services/sensemaker.js: // TODO: assign `then` to allow async processing
./services/sensemaker.js: // TODO: add `user_id` to request, assign to `creator`
./services/sensemaker.js: // TODO: assign `then` to allow async processing
./services/sensemaker.js: // TODO: prepare maximum token length
./services/sensemaker.js: // TODO: pass only chunk of document, to reduce payload size and increase relevancy
./services/sensemaker.js: // TODO: catch error
./services/sensemaker.js: // TODO: convert limit here to constant
./services/sensemaker.js: // TODO: reduce matter metadata to only relevant fields, use summary fields to compress context
./services/sensemaker.js: // TODO: use this new reduced metadata to reduce confusion / space consumed by metadata
./services/sensemaker.js: // TODO: Compressor
./services/sensemaker.js: // TODO: re-enable extractor for cards; file cards, case cards, jurisdiction cards, etc.
./services/sensemaker.js: // TODO: reject any answers including case titles not found in our database
./services/sensemaker.js: // TODO: re-enable case cards, standardize to other card formats
./services/sensemaker.js: // TODO: load from STATE file
./services/sensemaker.js: // TODO: check for successful prime
./services/sensemaker.js: courts: [], // TODO: implement
./services/sensemaker.js: documents: [], // TODO: implement
./services/sensemaker.js: people: [], // TODO: implement
./services/sensemaker.js: // TODO: add filesystem watcher for live updates (low priority)
./services/sensemaker.js: // TODO: define these with a map / loop
./services/sensemaker.js: // TODO: allow configurable whitelist
./services/sensemaker.js: // TODO: remove
./services/sensemaker.js: // TODO: test each search endpoint
./services/sensemaker.js: // TODO: switch to PATCH `/users/:username`
./services/sensemaker.js: // TODO: move all handlers to class methods
./services/sensemaker.js: // TODO: render page for accepting invitation
./services/sensemaker.js: // TODO: change to /sessions
./services/sensemaker.js: // TODO: check logic of PATCH, any other routes conflict?
./services/sensemaker.js: // TODO: pre-render application with request token, then send that string to the application's `_renderWith` function
./services/sensemaker.js: // TODO: revert these routes
./services/sensemaker.js: // TODO: check token
./services/sensemaker.js: // TODO: attach old message ID to a new message ID, send `regenerate_requested` to true
./services/sensemaker.js: // TODO: update message graph; consider requests, responses
./services/sensemaker.js: //             user_id: 1 // TODO: real user ID
./services/sensemaker.js: // TODO: troubleshoot why this is necessary (use `why()` above)
./services/sensemaker.js: // TODO: check token
./services/sensemaker.js: // TODO: add reactions
./services/sensemaker.js: // TODO: show error message in client
./services/sensemaker.js: // TODO: halt on !req.user.id
./services/sensemaker.js: // TODO: revoke token on Discord
./services/sensemaker.js: // TODO: flash disconnected message
./services/sensemaker.js: // TODO: handle error
./services/sensemaker.js: // TODO: fix @fabric/core/types/message to allow custom message types
./services/sensemaker.js: // TODO: fix @fabric/core/types/message to allow custom message types
./services/sensemaker.js: // TODO: Promise.allSettled([agentAlpha.start(), agentBeta.start(), agentGamma.start()]);
./services/sensemaker.js: // TODO: consider additional metadata fields
./services/sensemaker.js: // TODO: direct store to graph database
./services/sensemaker.js: // TODO: use response signing (`X-Fabric-HTTP-Signature`, etc.)
./services/sensemaker.js: const headers = parts[0]; // TODO: check headers
./services/sensemaker.js: const signature = parts[2]; // TODO: check signature
./services/openai.js: const messages = request.messages; // TODO: pull higher in logic?
./services/openai.js: fetch(`http://${args.host}${args.path}`, { // TODO: switch to HTTPS first/only
